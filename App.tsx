
import React, { useState, useCallback } from 'react';
import { CodeState, FileType } from './types';
import { generateWebsiteCode } from './services/geminiService';
import Header from './components/Header';
import CodeEditor from './components/CodeEditor';
import LivePreview from './components/LivePreview';

const initialCode: CodeState = {
  html: `
<div class="container">
  <h1>Welcome to AI Web Builder</h1>
  <p>Describe the website you want to build in the prompt above, and watch the magic happen!</p>
  <div class="counter">
    <p>This is a simple counter:</p>
    <span id="value">0</span>
    <div class="buttons">
      <button id="decrement">-</button>
      <button id="increment">+</button>
    </div>
  </div>
</div>
`,
  css: `
body {
  font-family: sans-serif;
  background-color: #f0f4f8;
  color: #333;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}
.container {
  text-align: center;
  background: white;
  padding: 2rem 3rem;
  border-radius: 12px;
  box-shadow: 0 10px 25px rgba(0,0,0,0.1);
}
h1 {
  color: #1e3a8a;
  margin-bottom: 0.5rem;
}
.counter {
  margin-top: 2rem;
  background: #e0e7ff;
  padding: 1.5rem;
  border-radius: 8px;
}
#value {
  font-size: 3rem;
  font-weight: bold;
  color: #312e81;
}
.buttons {
  margin-top: 1rem;
}
button {
  font-size: 1.5rem;
  width: 50px;
  height: 50px;
  margin: 0 10px;
  border-radius: 50%;
  border: none;
  background-color: #4338ca;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s;
}
button:hover {
  background-color: #312e81;
}
`,
  js: `
const valueSpan = document.getElementById('value');
const incrementBtn = document.getElementById('increment');
const decrementBtn = document.getElementById('decrement');

let count = 0;

function updateCounter() {
  valueSpan.textContent = count;
}

incrementBtn.addEventListener('click', () => {
  count++;
  updateCounter();
});

decrementBtn.addEventListener('click', () => {
  count--;
  updateCounter();
});
`,
};

function App() {
  const [prompt, setPrompt] = useState<string>('');
  const [code, setCode] = useState<CodeState>(initialCode);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [activeFile, setActiveFile] = useState<FileType>(FileType.HTML);

  const handleGenerateCode = useCallback(async () => {
    if (!prompt.trim()) {
      setError('Please enter a description for the website.');
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const generatedCode = await generateWebsiteCode(prompt);
      setCode(generatedCode);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
      setError(`Failed to generate code: ${errorMessage}`);
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, [prompt]);

  const handleExport = useCallback(() => {
    const content = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Generated by AI Web Builder</title>
        <style>
${code.css}
        </style>
      </head>
      <body>
${code.html}
        <script>
${code.js}
        </script>
      </body>
      </html>
    `;
    const blob = new Blob([content.trim()], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'index.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [code]);
  

  return (
    <div className="flex flex-col h-screen bg-gray-900 text-white">
      <Header
        prompt={prompt}
        setPrompt={setPrompt}
        onGenerate={handleGenerateCode}
        onExport={handleExport}
        isLoading={isLoading}
      />
      {error && (
        <div className="bg-red-500/20 border border-red-500 text-red-300 px-4 py-2 mx-4 mb-2 rounded-md">
          <strong>Error:</strong> {error}
        </div>
      )}
      <main className="flex-grow flex flex-col md:flex-row overflow-hidden gap-4 p-4 pt-0">
        <div className="flex-1 flex flex-col min-h-0 bg-gray-800 rounded-lg shadow-lg">
          <CodeEditor
            code={code}
            setCode={setCode}
            activeFile={activeFile}
            setActiveFile={setActiveFile}
          />
        </div>
        <div className="flex-1 flex flex-col min-h-0 bg-gray-800 rounded-lg shadow-lg">
          <LivePreview code={code} />
        </div>
      </main>
    </div>
  );
}

export default App;
